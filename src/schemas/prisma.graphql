# source: http://localhost:4466
# timestamp: Thu Jan 31 2019 17:45:57 GMT+0900 (Korean Standard Time)

type AggregateAuthPayload {
  count: Int!
}

type AggregateChat {
  count: Int!
}

type AggregateChatroom {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String!
  user: User!
}

"""A connection to a list of items."""
type AuthPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  token: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type AuthPayloadEdge {
  """The item at the end of the edge."""
  node: AuthPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthPayloadOrderByInput {
  token_ASC
  token_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthPayloadPreviousValues {
  token: String!
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
}

input AuthPayloadUpdateManyMutationInput {
  token: String
}

input AuthPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadWhereInput!]
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  user: UserWhereInput
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Chat implements Node {
  id: ID!
  sender: User
  message: String
  created: DateTime!
  updated: DateTime!
}

"""A connection to a list of items."""
type ChatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  message: String
  created: DateTime!
  updated: DateTime!
  sender: UserCreateOneInput
}

input ChatCreateManyInput {
  create: [ChatCreateInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateOneInput {
  create: ChatCreateInput
  connect: ChatWhereUniqueInput
}

"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  created_ASC
  created_DESC
  updated_ASC
  updated_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChatPreviousValues {
  id: ID!
  message: String
  created: DateTime!
  updated: DateTime!
}

type Chatroom implements Node {
  id: ID!
  lastChat: Chat
  lastChatCnt: Int
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  created: DateTime!
  updated: DateTime!
}

"""A connection to a list of items."""
type ChatroomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatroomEdge]!
  aggregate: AggregateChatroom!
}

input ChatroomCreateInput {
  lastChatCnt: Int
  created: DateTime!
  updated: DateTime!
  lastChat: ChatCreateOneInput
  chats: ChatCreateManyInput
  users: UserCreateManyInput
}

"""An edge in a connection."""
type ChatroomEdge {
  """The item at the end of the edge."""
  node: Chatroom!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatroomOrderByInput {
  id_ASC
  id_DESC
  lastChatCnt_ASC
  lastChatCnt_DESC
  created_ASC
  created_DESC
  updated_ASC
  updated_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChatroomPreviousValues {
  id: ID!
  lastChatCnt: Int
  created: DateTime!
  updated: DateTime!
}

type ChatroomSubscriptionPayload {
  mutation: MutationType!
  node: Chatroom
  updatedFields: [String!]
  previousValues: ChatroomPreviousValues
}

input ChatroomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatroomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatroomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatroomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatroomWhereInput
}

input ChatroomUpdateInput {
  lastChatCnt: Int
  created: DateTime
  updated: DateTime
  lastChat: ChatUpdateOneInput
  chats: ChatUpdateManyInput
  users: UserUpdateManyInput
}

input ChatroomUpdateManyMutationInput {
  lastChatCnt: Int
  created: DateTime
  updated: DateTime
}

input ChatroomWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatroomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatroomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatroomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lastChatCnt: Int

  """All values that are not equal to given value."""
  lastChatCnt_not: Int

  """All values that are contained in given list."""
  lastChatCnt_in: [Int!]

  """All values that are not contained in given list."""
  lastChatCnt_not_in: [Int!]

  """All values less than the given value."""
  lastChatCnt_lt: Int

  """All values less than or equal the given value."""
  lastChatCnt_lte: Int

  """All values greater than the given value."""
  lastChatCnt_gt: Int

  """All values greater than or equal the given value."""
  lastChatCnt_gte: Int
  created: DateTime

  """All values that are not equal to given value."""
  created_not: DateTime

  """All values that are contained in given list."""
  created_in: [DateTime!]

  """All values that are not contained in given list."""
  created_not_in: [DateTime!]

  """All values less than the given value."""
  created_lt: DateTime

  """All values less than or equal the given value."""
  created_lte: DateTime

  """All values greater than the given value."""
  created_gt: DateTime

  """All values greater than or equal the given value."""
  created_gte: DateTime
  updated: DateTime

  """All values that are not equal to given value."""
  updated_not: DateTime

  """All values that are contained in given list."""
  updated_in: [DateTime!]

  """All values that are not contained in given list."""
  updated_not_in: [DateTime!]

  """All values less than the given value."""
  updated_lt: DateTime

  """All values less than or equal the given value."""
  updated_lte: DateTime

  """All values greater than the given value."""
  updated_gt: DateTime

  """All values greater than or equal the given value."""
  updated_gte: DateTime
  lastChat: ChatWhereInput
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input ChatroomWhereUniqueInput {
  id: ID
}

input ChatScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  created: DateTime

  """All values that are not equal to given value."""
  created_not: DateTime

  """All values that are contained in given list."""
  created_in: [DateTime!]

  """All values that are not contained in given list."""
  created_not_in: [DateTime!]

  """All values less than the given value."""
  created_lt: DateTime

  """All values less than or equal the given value."""
  created_lte: DateTime

  """All values greater than the given value."""
  created_gt: DateTime

  """All values greater than or equal the given value."""
  created_gte: DateTime
  updated: DateTime

  """All values that are not equal to given value."""
  updated_not: DateTime

  """All values that are contained in given list."""
  updated_in: [DateTime!]

  """All values that are not contained in given list."""
  updated_not_in: [DateTime!]

  """All values less than the given value."""
  updated_lt: DateTime

  """All values less than or equal the given value."""
  updated_lte: DateTime

  """All values greater than the given value."""
  updated_gt: DateTime

  """All values greater than or equal the given value."""
  updated_gte: DateTime
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
}

input ChatUpdateDataInput {
  message: String
  created: DateTime
  updated: DateTime
  sender: UserUpdateOneInput
}

input ChatUpdateInput {
  message: String
  created: DateTime
  updated: DateTime
  sender: UserUpdateOneInput
}

input ChatUpdateManyDataInput {
  message: String
  created: DateTime
  updated: DateTime
}

input ChatUpdateManyInput {
  create: [ChatCreateInput!]
  connect: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueNestedInput!]
  updateMany: [ChatUpdateManyWithWhereNestedInput!]
  deleteMany: [ChatScalarWhereInput!]
  upsert: [ChatUpsertWithWhereUniqueNestedInput!]
}

input ChatUpdateManyMutationInput {
  message: String
  created: DateTime
  updated: DateTime
}

input ChatUpdateManyWithWhereNestedInput {
  where: ChatScalarWhereInput!
  data: ChatUpdateManyDataInput!
}

input ChatUpdateOneInput {
  create: ChatCreateInput
  connect: ChatWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChatUpdateDataInput
  upsert: ChatUpsertNestedInput
}

input ChatUpdateWithWhereUniqueNestedInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateDataInput!
}

input ChatUpsertNestedInput {
  update: ChatUpdateDataInput!
  create: ChatCreateInput!
}

input ChatUpsertWithWhereUniqueNestedInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateDataInput!
  create: ChatCreateInput!
}

input ChatWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  created: DateTime

  """All values that are not equal to given value."""
  created_not: DateTime

  """All values that are contained in given list."""
  created_in: [DateTime!]

  """All values that are not contained in given list."""
  created_not_in: [DateTime!]

  """All values less than the given value."""
  created_lt: DateTime

  """All values less than or equal the given value."""
  created_lte: DateTime

  """All values greater than the given value."""
  created_gt: DateTime

  """All values greater than or equal the given value."""
  created_gte: DateTime
  updated: DateTime

  """All values that are not equal to given value."""
  updated_not: DateTime

  """All values that are contained in given list."""
  updated_in: [DateTime!]

  """All values that are not contained in given list."""
  updated_not_in: [DateTime!]

  """All values less than the given value."""
  updated_lt: DateTime

  """All values less than or equal the given value."""
  updated_lte: DateTime

  """All values greater than the given value."""
  updated_gt: DateTime

  """All values greater than or equal the given value."""
  updated_gte: DateTime
  sender: UserWhereInput
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createChatroom(data: ChatroomCreateInput!): Chatroom!
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  createUser(data: UserCreateInput!): User!
  createChat(data: ChatCreateInput!): Chat!
  updateChatroom(data: ChatroomUpdateInput!, where: ChatroomWhereUniqueInput!): Chatroom
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  deleteChatroom(where: ChatroomWhereUniqueInput!): Chatroom
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChat(where: ChatWhereUniqueInput!): Chat
  upsertChatroom(where: ChatroomWhereUniqueInput!, create: ChatroomCreateInput!, update: ChatroomUpdateInput!): Chatroom!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  updateManyChatrooms(data: ChatroomUpdateManyMutationInput!, where: ChatroomWhereInput): BatchPayload!
  updateManyAuthPayloads(data: AuthPayloadUpdateManyMutationInput!, where: AuthPayloadWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyChats(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): BatchPayload!
  deleteManyChatrooms(where: ChatroomWhereInput): BatchPayload!
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  chatrooms(where: ChatroomWhereInput, orderBy: ChatroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chatroom]!
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  chatroom(where: ChatroomWhereUniqueInput!): Chatroom
  user(where: UserWhereUniqueInput!): User
  chat(where: ChatWhereUniqueInput!): Chat
  chatroomsConnection(where: ChatroomWhereInput, orderBy: ChatroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatroomConnection!
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  chatroom(where: ChatroomSubscriptionWhereInput): ChatroomSubscriptionPayload
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  displayName: String
  photoUrl: String
  statusMsg: String
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isOnline: Boolean
  created: DateTime!
  updated: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  displayName: String
  photoUrl: String
  statusMsg: String
  isOnline: Boolean
  created: DateTime!
  updated: DateTime!
  friends: UserCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  displayName_ASC
  displayName_DESC
  photoUrl_ASC
  photoUrl_DESC
  statusMsg_ASC
  statusMsg_DESC
  isOnline_ASC
  isOnline_DESC
  created_ASC
  created_DESC
  updated_ASC
  updated_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  displayName: String
  photoUrl: String
  statusMsg: String
  isOnline: Boolean
  created: DateTime!
  updated: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  photoUrl: String

  """All values that are not equal to given value."""
  photoUrl_not: String

  """All values that are contained in given list."""
  photoUrl_in: [String!]

  """All values that are not contained in given list."""
  photoUrl_not_in: [String!]

  """All values less than the given value."""
  photoUrl_lt: String

  """All values less than or equal the given value."""
  photoUrl_lte: String

  """All values greater than the given value."""
  photoUrl_gt: String

  """All values greater than or equal the given value."""
  photoUrl_gte: String

  """All values containing the given string."""
  photoUrl_contains: String

  """All values not containing the given string."""
  photoUrl_not_contains: String

  """All values starting with the given string."""
  photoUrl_starts_with: String

  """All values not starting with the given string."""
  photoUrl_not_starts_with: String

  """All values ending with the given string."""
  photoUrl_ends_with: String

  """All values not ending with the given string."""
  photoUrl_not_ends_with: String
  statusMsg: String

  """All values that are not equal to given value."""
  statusMsg_not: String

  """All values that are contained in given list."""
  statusMsg_in: [String!]

  """All values that are not contained in given list."""
  statusMsg_not_in: [String!]

  """All values less than the given value."""
  statusMsg_lt: String

  """All values less than or equal the given value."""
  statusMsg_lte: String

  """All values greater than the given value."""
  statusMsg_gt: String

  """All values greater than or equal the given value."""
  statusMsg_gte: String

  """All values containing the given string."""
  statusMsg_contains: String

  """All values not containing the given string."""
  statusMsg_not_contains: String

  """All values starting with the given string."""
  statusMsg_starts_with: String

  """All values not starting with the given string."""
  statusMsg_not_starts_with: String

  """All values ending with the given string."""
  statusMsg_ends_with: String

  """All values not ending with the given string."""
  statusMsg_not_ends_with: String
  isOnline: Boolean

  """All values that are not equal to given value."""
  isOnline_not: Boolean
  created: DateTime

  """All values that are not equal to given value."""
  created_not: DateTime

  """All values that are contained in given list."""
  created_in: [DateTime!]

  """All values that are not contained in given list."""
  created_not_in: [DateTime!]

  """All values less than the given value."""
  created_lt: DateTime

  """All values less than or equal the given value."""
  created_lte: DateTime

  """All values greater than the given value."""
  created_gt: DateTime

  """All values greater than or equal the given value."""
  created_gte: DateTime
  updated: DateTime

  """All values that are not equal to given value."""
  updated_not: DateTime

  """All values that are contained in given list."""
  updated_in: [DateTime!]

  """All values that are not contained in given list."""
  updated_not_in: [DateTime!]

  """All values less than the given value."""
  updated_lt: DateTime

  """All values less than or equal the given value."""
  updated_lte: DateTime

  """All values greater than the given value."""
  updated_gt: DateTime

  """All values greater than or equal the given value."""
  updated_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  displayName: String
  photoUrl: String
  statusMsg: String
  isOnline: Boolean
  created: DateTime
  updated: DateTime
  friends: UserUpdateManyInput
}

input UserUpdateInput {
  email: String
  password: String
  displayName: String
  photoUrl: String
  statusMsg: String
  isOnline: Boolean
  created: DateTime
  updated: DateTime
  friends: UserUpdateManyInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  displayName: String
  photoUrl: String
  statusMsg: String
  isOnline: Boolean
  created: DateTime
  updated: DateTime
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  displayName: String
  photoUrl: String
  statusMsg: String
  isOnline: Boolean
  created: DateTime
  updated: DateTime
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  photoUrl: String

  """All values that are not equal to given value."""
  photoUrl_not: String

  """All values that are contained in given list."""
  photoUrl_in: [String!]

  """All values that are not contained in given list."""
  photoUrl_not_in: [String!]

  """All values less than the given value."""
  photoUrl_lt: String

  """All values less than or equal the given value."""
  photoUrl_lte: String

  """All values greater than the given value."""
  photoUrl_gt: String

  """All values greater than or equal the given value."""
  photoUrl_gte: String

  """All values containing the given string."""
  photoUrl_contains: String

  """All values not containing the given string."""
  photoUrl_not_contains: String

  """All values starting with the given string."""
  photoUrl_starts_with: String

  """All values not starting with the given string."""
  photoUrl_not_starts_with: String

  """All values ending with the given string."""
  photoUrl_ends_with: String

  """All values not ending with the given string."""
  photoUrl_not_ends_with: String
  statusMsg: String

  """All values that are not equal to given value."""
  statusMsg_not: String

  """All values that are contained in given list."""
  statusMsg_in: [String!]

  """All values that are not contained in given list."""
  statusMsg_not_in: [String!]

  """All values less than the given value."""
  statusMsg_lt: String

  """All values less than or equal the given value."""
  statusMsg_lte: String

  """All values greater than the given value."""
  statusMsg_gt: String

  """All values greater than or equal the given value."""
  statusMsg_gte: String

  """All values containing the given string."""
  statusMsg_contains: String

  """All values not containing the given string."""
  statusMsg_not_contains: String

  """All values starting with the given string."""
  statusMsg_starts_with: String

  """All values not starting with the given string."""
  statusMsg_not_starts_with: String

  """All values ending with the given string."""
  statusMsg_ends_with: String

  """All values not ending with the given string."""
  statusMsg_not_ends_with: String
  isOnline: Boolean

  """All values that are not equal to given value."""
  isOnline_not: Boolean
  created: DateTime

  """All values that are not equal to given value."""
  created_not: DateTime

  """All values that are contained in given list."""
  created_in: [DateTime!]

  """All values that are not contained in given list."""
  created_not_in: [DateTime!]

  """All values less than the given value."""
  created_lt: DateTime

  """All values less than or equal the given value."""
  created_lte: DateTime

  """All values greater than the given value."""
  created_gt: DateTime

  """All values greater than or equal the given value."""
  created_gte: DateTime
  updated: DateTime

  """All values that are not equal to given value."""
  updated_not: DateTime

  """All values that are contained in given list."""
  updated_in: [DateTime!]

  """All values that are not contained in given list."""
  updated_not_in: [DateTime!]

  """All values less than the given value."""
  updated_lt: DateTime

  """All values less than or equal the given value."""
  updated_lte: DateTime

  """All values greater than the given value."""
  updated_gt: DateTime

  """All values greater than or equal the given value."""
  updated_gte: DateTime
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
