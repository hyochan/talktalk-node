// Code generated by Prisma (prisma@1.30.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  chat: (where?: ChatWhereInput) => Promise<boolean>;
  chatMembership: (where?: ChatMembershipWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userRelationship: (where?: UserRelationshipWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chat: (where: ChatWhereUniqueInput) => ChatPromise;
  chats: (
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chat>;
  chatsConnection: (
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChatConnectionPromise;
  chatMembership: (
    where: ChatMembershipWhereUniqueInput
  ) => ChatMembershipPromise;
  chatMemberships: (
    args?: {
      where?: ChatMembershipWhereInput;
      orderBy?: ChatMembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ChatMembership>;
  chatMembershipsConnection: (
    args?: {
      where?: ChatMembershipWhereInput;
      orderBy?: ChatMembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChatMembershipConnectionPromise;
  file: (where: FileWhereUniqueInput) => FilePromise;
  files: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<File>;
  filesConnection: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FileConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Message>;
  messagesConnection: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userRelationship: (
    where: UserRelationshipWhereUniqueInput
  ) => UserRelationshipPromise;
  userRelationships: (
    args?: {
      where?: UserRelationshipWhereInput;
      orderBy?: UserRelationshipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserRelationship>;
  userRelationshipsConnection: (
    args?: {
      where?: UserRelationshipWhereInput;
      orderBy?: UserRelationshipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserRelationshipConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChat: (data: ChatCreateInput) => ChatPromise;
  updateChat: (
    args: { data: ChatUpdateInput; where: ChatWhereUniqueInput }
  ) => ChatPromise;
  upsertChat: (
    args: {
      where: ChatWhereUniqueInput;
      create: ChatCreateInput;
      update: ChatUpdateInput;
    }
  ) => ChatPromise;
  deleteChat: (where: ChatWhereUniqueInput) => ChatPromise;
  deleteManyChats: (where?: ChatWhereInput) => BatchPayloadPromise;
  createChatMembership: (
    data: ChatMembershipCreateInput
  ) => ChatMembershipPromise;
  updateChatMembership: (
    args: {
      data: ChatMembershipUpdateInput;
      where: ChatMembershipWhereUniqueInput;
    }
  ) => ChatMembershipPromise;
  updateManyChatMemberships: (
    args: {
      data: ChatMembershipUpdateManyMutationInput;
      where?: ChatMembershipWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertChatMembership: (
    args: {
      where: ChatMembershipWhereUniqueInput;
      create: ChatMembershipCreateInput;
      update: ChatMembershipUpdateInput;
    }
  ) => ChatMembershipPromise;
  deleteChatMembership: (
    where: ChatMembershipWhereUniqueInput
  ) => ChatMembershipPromise;
  deleteManyChatMemberships: (
    where?: ChatMembershipWhereInput
  ) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (
    args: { data: FileUpdateInput; where: FileWhereUniqueInput }
  ) => FilePromise;
  updateManyFiles: (
    args: { data: FileUpdateManyMutationInput; where?: FileWhereInput }
  ) => BatchPayloadPromise;
  upsertFile: (
    args: {
      where: FileWhereUniqueInput;
      create: FileCreateInput;
      update: FileUpdateInput;
    }
  ) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (
    args: { data: MessageUpdateInput; where: MessageWhereUniqueInput }
  ) => MessagePromise;
  updateManyMessages: (
    args: { data: MessageUpdateManyMutationInput; where?: MessageWhereInput }
  ) => BatchPayloadPromise;
  upsertMessage: (
    args: {
      where: MessageWhereUniqueInput;
      create: MessageCreateInput;
      update: MessageUpdateInput;
    }
  ) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserRelationship: (
    data: UserRelationshipCreateInput
  ) => UserRelationshipPromise;
  updateUserRelationship: (
    args: {
      data: UserRelationshipUpdateInput;
      where: UserRelationshipWhereUniqueInput;
    }
  ) => UserRelationshipPromise;
  updateManyUserRelationships: (
    args: {
      data: UserRelationshipUpdateManyMutationInput;
      where?: UserRelationshipWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserRelationship: (
    args: {
      where: UserRelationshipWhereUniqueInput;
      create: UserRelationshipCreateInput;
      update: UserRelationshipUpdateInput;
    }
  ) => UserRelationshipPromise;
  deleteUserRelationship: (
    where: UserRelationshipWhereUniqueInput
  ) => UserRelationshipPromise;
  deleteManyUserRelationships: (
    where?: UserRelationshipWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chat: (
    where?: ChatSubscriptionWhereInput
  ) => ChatSubscriptionPayloadSubscription;
  chatMembership: (
    where?: ChatMembershipSubscriptionWhereInput
  ) => ChatMembershipSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userRelationship: (
    where?: UserRelationshipSubscriptionWhereInput
  ) => UserRelationshipSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRelationType = "FRIEND" | "WAIT_APPROVAL" | "BLOCKED";

export type MessageType = "SYSTEM" | "TEXT" | "FILE";

export type ChatMembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isMuted_ASC"
  | "isMuted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRelationshipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "text_ASC"
  | "text_DESC";

export type ChatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "contentType_ASC"
  | "contentType_DESC"
  | "size_ASC"
  | "size_DESC"
  | "fileName_ASC"
  | "fileName_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "passwordDigest_ASC"
  | "passwordDigest_DESC"
  | "passwordResetToken_ASC"
  | "passwordResetToken_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "statusMessage_ASC"
  | "statusMessage_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChatWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ChatMembershipWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chat?: ChatWhereInput;
  user?: UserWhereInput;
  isMuted?: Boolean;
  isMuted_not?: Boolean;
  AND?: ChatMembershipWhereInput[] | ChatMembershipWhereInput;
  OR?: ChatMembershipWhereInput[] | ChatMembershipWhereInput;
  NOT?: ChatMembershipWhereInput[] | ChatMembershipWhereInput;
}

export interface ChatWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  members_every?: ChatMembershipWhereInput;
  members_some?: ChatMembershipWhereInput;
  members_none?: ChatMembershipWhereInput;
  messages_every?: MessageWhereInput;
  messages_some?: MessageWhereInput;
  messages_none?: MessageWhereInput;
  AND?: ChatWhereInput[] | ChatWhereInput;
  OR?: ChatWhereInput[] | ChatWhereInput;
  NOT?: ChatWhereInput[] | ChatWhereInput;
}

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  chat?: ChatWhereInput;
  author?: UserWhereInput;
  type?: MessageType;
  type_not?: MessageType;
  type_in?: MessageType[] | MessageType;
  type_not_in?: MessageType[] | MessageType;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  attachment?: FileWhereInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  passwordDigest?: String;
  passwordDigest_not?: String;
  passwordDigest_in?: String[] | String;
  passwordDigest_not_in?: String[] | String;
  passwordDigest_lt?: String;
  passwordDigest_lte?: String;
  passwordDigest_gt?: String;
  passwordDigest_gte?: String;
  passwordDigest_contains?: String;
  passwordDigest_not_contains?: String;
  passwordDigest_starts_with?: String;
  passwordDigest_not_starts_with?: String;
  passwordDigest_ends_with?: String;
  passwordDigest_not_ends_with?: String;
  passwordResetToken?: String;
  passwordResetToken_not?: String;
  passwordResetToken_in?: String[] | String;
  passwordResetToken_not_in?: String[] | String;
  passwordResetToken_lt?: String;
  passwordResetToken_lte?: String;
  passwordResetToken_gt?: String;
  passwordResetToken_gte?: String;
  passwordResetToken_contains?: String;
  passwordResetToken_not_contains?: String;
  passwordResetToken_starts_with?: String;
  passwordResetToken_not_starts_with?: String;
  passwordResetToken_ends_with?: String;
  passwordResetToken_not_ends_with?: String;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  photo?: FileWhereInput;
  statusMessage?: String;
  statusMessage_not?: String;
  statusMessage_in?: String[] | String;
  statusMessage_not_in?: String[] | String;
  statusMessage_lt?: String;
  statusMessage_lte?: String;
  statusMessage_gt?: String;
  statusMessage_gte?: String;
  statusMessage_contains?: String;
  statusMessage_not_contains?: String;
  statusMessage_starts_with?: String;
  statusMessage_not_starts_with?: String;
  statusMessage_ends_with?: String;
  statusMessage_not_ends_with?: String;
  memberships_every?: ChatMembershipWhereInput;
  memberships_some?: ChatMembershipWhereInput;
  memberships_none?: ChatMembershipWhereInput;
  relationships_every?: UserRelationshipWhereInput;
  relationships_some?: UserRelationshipWhereInput;
  relationships_none?: UserRelationshipWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface FileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  contentType?: String;
  contentType_not?: String;
  contentType_in?: String[] | String;
  contentType_not_in?: String[] | String;
  contentType_lt?: String;
  contentType_lte?: String;
  contentType_gt?: String;
  contentType_gte?: String;
  contentType_contains?: String;
  contentType_not_contains?: String;
  contentType_starts_with?: String;
  contentType_not_starts_with?: String;
  contentType_ends_with?: String;
  contentType_not_ends_with?: String;
  size?: Int;
  size_not?: Int;
  size_in?: Int[] | Int;
  size_not_in?: Int[] | Int;
  size_lt?: Int;
  size_lte?: Int;
  size_gt?: Int;
  size_gte?: Int;
  fileName?: String;
  fileName_not?: String;
  fileName_in?: String[] | String;
  fileName_not_in?: String[] | String;
  fileName_lt?: String;
  fileName_lte?: String;
  fileName_gt?: String;
  fileName_gte?: String;
  fileName_contains?: String;
  fileName_not_contains?: String;
  fileName_starts_with?: String;
  fileName_not_starts_with?: String;
  fileName_ends_with?: String;
  fileName_not_ends_with?: String;
  AND?: FileWhereInput[] | FileWhereInput;
  OR?: FileWhereInput[] | FileWhereInput;
  NOT?: FileWhereInput[] | FileWhereInput;
}

export interface UserRelationshipWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: UserRelationType;
  type_not?: UserRelationType;
  type_in?: UserRelationType[] | UserRelationType;
  type_not_in?: UserRelationType[] | UserRelationType;
  fromUser?: UserWhereInput;
  toUser?: UserWhereInput;
  AND?: UserRelationshipWhereInput[] | UserRelationshipWhereInput;
  OR?: UserRelationshipWhereInput[] | UserRelationshipWhereInput;
  NOT?: UserRelationshipWhereInput[] | UserRelationshipWhereInput;
}

export type ChatMembershipWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type UserRelationshipWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ChatCreateInput {
  id?: ID_Input;
  members?: ChatMembershipCreateManyWithoutChatInput;
  messages?: MessageCreateManyWithoutChatInput;
}

export interface ChatMembershipCreateManyWithoutChatInput {
  create?:
    | ChatMembershipCreateWithoutChatInput[]
    | ChatMembershipCreateWithoutChatInput;
  connect?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
}

export interface ChatMembershipCreateWithoutChatInput {
  id?: ID_Input;
  user: UserCreateOneWithoutMembershipsInput;
  isMuted?: Boolean;
}

export interface UserCreateOneWithoutMembershipsInput {
  create?: UserCreateWithoutMembershipsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutMembershipsInput {
  id?: ID_Input;
  email: String;
  passwordDigest: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileCreateOneInput;
  statusMessage?: String;
  relationships?: UserRelationshipCreateManyWithoutFromUserInput;
}

export interface FileCreateOneInput {
  create?: FileCreateInput;
  connect?: FileWhereUniqueInput;
}

export interface FileCreateInput {
  id?: ID_Input;
  contentType: String;
  size: Int;
  fileName: String;
}

export interface UserRelationshipCreateManyWithoutFromUserInput {
  create?:
    | UserRelationshipCreateWithoutFromUserInput[]
    | UserRelationshipCreateWithoutFromUserInput;
  connect?:
    | UserRelationshipWhereUniqueInput[]
    | UserRelationshipWhereUniqueInput;
}

export interface UserRelationshipCreateWithoutFromUserInput {
  id?: ID_Input;
  type: UserRelationType;
  toUser: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  email: String;
  passwordDigest: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileCreateOneInput;
  statusMessage?: String;
  memberships?: ChatMembershipCreateManyWithoutUserInput;
  relationships?: UserRelationshipCreateManyWithoutFromUserInput;
}

export interface ChatMembershipCreateManyWithoutUserInput {
  create?:
    | ChatMembershipCreateWithoutUserInput[]
    | ChatMembershipCreateWithoutUserInput;
  connect?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
}

export interface ChatMembershipCreateWithoutUserInput {
  id?: ID_Input;
  chat: ChatCreateOneWithoutMembersInput;
  isMuted?: Boolean;
}

export interface ChatCreateOneWithoutMembersInput {
  create?: ChatCreateWithoutMembersInput;
  connect?: ChatWhereUniqueInput;
}

export interface ChatCreateWithoutMembersInput {
  id?: ID_Input;
  messages?: MessageCreateManyWithoutChatInput;
}

export interface MessageCreateManyWithoutChatInput {
  create?: MessageCreateWithoutChatInput[] | MessageCreateWithoutChatInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageCreateWithoutChatInput {
  id?: ID_Input;
  deletedAt: DateTimeInput;
  author: UserCreateOneInput;
  type: MessageType;
  text?: String;
  attachment?: FileCreateOneInput;
}

export interface ChatUpdateInput {
  members?: ChatMembershipUpdateManyWithoutChatInput;
  messages?: MessageUpdateManyWithoutChatInput;
}

export interface ChatMembershipUpdateManyWithoutChatInput {
  create?:
    | ChatMembershipCreateWithoutChatInput[]
    | ChatMembershipCreateWithoutChatInput;
  delete?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
  connect?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
  set?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
  disconnect?:
    | ChatMembershipWhereUniqueInput[]
    | ChatMembershipWhereUniqueInput;
  update?:
    | ChatMembershipUpdateWithWhereUniqueWithoutChatInput[]
    | ChatMembershipUpdateWithWhereUniqueWithoutChatInput;
  upsert?:
    | ChatMembershipUpsertWithWhereUniqueWithoutChatInput[]
    | ChatMembershipUpsertWithWhereUniqueWithoutChatInput;
  deleteMany?:
    | ChatMembershipScalarWhereInput[]
    | ChatMembershipScalarWhereInput;
  updateMany?:
    | ChatMembershipUpdateManyWithWhereNestedInput[]
    | ChatMembershipUpdateManyWithWhereNestedInput;
}

export interface ChatMembershipUpdateWithWhereUniqueWithoutChatInput {
  where: ChatMembershipWhereUniqueInput;
  data: ChatMembershipUpdateWithoutChatDataInput;
}

export interface ChatMembershipUpdateWithoutChatDataInput {
  user?: UserUpdateOneRequiredWithoutMembershipsInput;
  isMuted?: Boolean;
}

export interface UserUpdateOneRequiredWithoutMembershipsInput {
  create?: UserCreateWithoutMembershipsInput;
  update?: UserUpdateWithoutMembershipsDataInput;
  upsert?: UserUpsertWithoutMembershipsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutMembershipsDataInput {
  email?: String;
  passwordDigest?: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileUpdateOneInput;
  statusMessage?: String;
  relationships?: UserRelationshipUpdateManyWithoutFromUserInput;
}

export interface FileUpdateOneInput {
  create?: FileCreateInput;
  update?: FileUpdateDataInput;
  upsert?: FileUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FileWhereUniqueInput;
}

export interface FileUpdateDataInput {
  contentType?: String;
  size?: Int;
  fileName?: String;
}

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface UserRelationshipUpdateManyWithoutFromUserInput {
  create?:
    | UserRelationshipCreateWithoutFromUserInput[]
    | UserRelationshipCreateWithoutFromUserInput;
  delete?:
    | UserRelationshipWhereUniqueInput[]
    | UserRelationshipWhereUniqueInput;
  connect?:
    | UserRelationshipWhereUniqueInput[]
    | UserRelationshipWhereUniqueInput;
  set?: UserRelationshipWhereUniqueInput[] | UserRelationshipWhereUniqueInput;
  disconnect?:
    | UserRelationshipWhereUniqueInput[]
    | UserRelationshipWhereUniqueInput;
  update?:
    | UserRelationshipUpdateWithWhereUniqueWithoutFromUserInput[]
    | UserRelationshipUpdateWithWhereUniqueWithoutFromUserInput;
  upsert?:
    | UserRelationshipUpsertWithWhereUniqueWithoutFromUserInput[]
    | UserRelationshipUpsertWithWhereUniqueWithoutFromUserInput;
  deleteMany?:
    | UserRelationshipScalarWhereInput[]
    | UserRelationshipScalarWhereInput;
  updateMany?:
    | UserRelationshipUpdateManyWithWhereNestedInput[]
    | UserRelationshipUpdateManyWithWhereNestedInput;
}

export interface UserRelationshipUpdateWithWhereUniqueWithoutFromUserInput {
  where: UserRelationshipWhereUniqueInput;
  data: UserRelationshipUpdateWithoutFromUserDataInput;
}

export interface UserRelationshipUpdateWithoutFromUserDataInput {
  type?: UserRelationType;
  toUser?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  email?: String;
  passwordDigest?: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileUpdateOneInput;
  statusMessage?: String;
  memberships?: ChatMembershipUpdateManyWithoutUserInput;
  relationships?: UserRelationshipUpdateManyWithoutFromUserInput;
}

export interface ChatMembershipUpdateManyWithoutUserInput {
  create?:
    | ChatMembershipCreateWithoutUserInput[]
    | ChatMembershipCreateWithoutUserInput;
  delete?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
  connect?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
  set?: ChatMembershipWhereUniqueInput[] | ChatMembershipWhereUniqueInput;
  disconnect?:
    | ChatMembershipWhereUniqueInput[]
    | ChatMembershipWhereUniqueInput;
  update?:
    | ChatMembershipUpdateWithWhereUniqueWithoutUserInput[]
    | ChatMembershipUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ChatMembershipUpsertWithWhereUniqueWithoutUserInput[]
    | ChatMembershipUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?:
    | ChatMembershipScalarWhereInput[]
    | ChatMembershipScalarWhereInput;
  updateMany?:
    | ChatMembershipUpdateManyWithWhereNestedInput[]
    | ChatMembershipUpdateManyWithWhereNestedInput;
}

export interface ChatMembershipUpdateWithWhereUniqueWithoutUserInput {
  where: ChatMembershipWhereUniqueInput;
  data: ChatMembershipUpdateWithoutUserDataInput;
}

export interface ChatMembershipUpdateWithoutUserDataInput {
  chat?: ChatUpdateOneRequiredWithoutMembersInput;
  isMuted?: Boolean;
}

export interface ChatUpdateOneRequiredWithoutMembersInput {
  create?: ChatCreateWithoutMembersInput;
  update?: ChatUpdateWithoutMembersDataInput;
  upsert?: ChatUpsertWithoutMembersInput;
  connect?: ChatWhereUniqueInput;
}

export interface ChatUpdateWithoutMembersDataInput {
  messages?: MessageUpdateManyWithoutChatInput;
}

export interface MessageUpdateManyWithoutChatInput {
  create?: MessageCreateWithoutChatInput[] | MessageCreateWithoutChatInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutChatInput[]
    | MessageUpdateWithWhereUniqueWithoutChatInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutChatInput[]
    | MessageUpsertWithWhereUniqueWithoutChatInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface MessageUpdateWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutChatDataInput;
}

export interface MessageUpdateWithoutChatDataInput {
  deletedAt?: DateTimeInput;
  author?: UserUpdateOneRequiredInput;
  type?: MessageType;
  text?: String;
  attachment?: FileUpdateOneInput;
}

export interface MessageUpsertWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutChatDataInput;
  create: MessageCreateWithoutChatInput;
}

export interface MessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  type?: MessageType;
  type_not?: MessageType;
  type_in?: MessageType[] | MessageType;
  type_not_in?: MessageType[] | MessageType;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  OR?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  NOT?: MessageScalarWhereInput[] | MessageScalarWhereInput;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  deletedAt?: DateTimeInput;
  type?: MessageType;
  text?: String;
}

export interface ChatUpsertWithoutMembersInput {
  update: ChatUpdateWithoutMembersDataInput;
  create: ChatCreateWithoutMembersInput;
}

export interface ChatMembershipUpsertWithWhereUniqueWithoutUserInput {
  where: ChatMembershipWhereUniqueInput;
  update: ChatMembershipUpdateWithoutUserDataInput;
  create: ChatMembershipCreateWithoutUserInput;
}

export interface ChatMembershipScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isMuted?: Boolean;
  isMuted_not?: Boolean;
  AND?: ChatMembershipScalarWhereInput[] | ChatMembershipScalarWhereInput;
  OR?: ChatMembershipScalarWhereInput[] | ChatMembershipScalarWhereInput;
  NOT?: ChatMembershipScalarWhereInput[] | ChatMembershipScalarWhereInput;
}

export interface ChatMembershipUpdateManyWithWhereNestedInput {
  where: ChatMembershipScalarWhereInput;
  data: ChatMembershipUpdateManyDataInput;
}

export interface ChatMembershipUpdateManyDataInput {
  isMuted?: Boolean;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserRelationshipUpsertWithWhereUniqueWithoutFromUserInput {
  where: UserRelationshipWhereUniqueInput;
  update: UserRelationshipUpdateWithoutFromUserDataInput;
  create: UserRelationshipCreateWithoutFromUserInput;
}

export interface UserRelationshipScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: UserRelationType;
  type_not?: UserRelationType;
  type_in?: UserRelationType[] | UserRelationType;
  type_not_in?: UserRelationType[] | UserRelationType;
  AND?: UserRelationshipScalarWhereInput[] | UserRelationshipScalarWhereInput;
  OR?: UserRelationshipScalarWhereInput[] | UserRelationshipScalarWhereInput;
  NOT?: UserRelationshipScalarWhereInput[] | UserRelationshipScalarWhereInput;
}

export interface UserRelationshipUpdateManyWithWhereNestedInput {
  where: UserRelationshipScalarWhereInput;
  data: UserRelationshipUpdateManyDataInput;
}

export interface UserRelationshipUpdateManyDataInput {
  type?: UserRelationType;
}

export interface UserUpsertWithoutMembershipsInput {
  update: UserUpdateWithoutMembershipsDataInput;
  create: UserCreateWithoutMembershipsInput;
}

export interface ChatMembershipUpsertWithWhereUniqueWithoutChatInput {
  where: ChatMembershipWhereUniqueInput;
  update: ChatMembershipUpdateWithoutChatDataInput;
  create: ChatMembershipCreateWithoutChatInput;
}

export interface ChatMembershipCreateInput {
  id?: ID_Input;
  chat: ChatCreateOneWithoutMembersInput;
  user: UserCreateOneWithoutMembershipsInput;
  isMuted?: Boolean;
}

export interface ChatMembershipUpdateInput {
  chat?: ChatUpdateOneRequiredWithoutMembersInput;
  user?: UserUpdateOneRequiredWithoutMembershipsInput;
  isMuted?: Boolean;
}

export interface ChatMembershipUpdateManyMutationInput {
  isMuted?: Boolean;
}

export interface FileUpdateInput {
  contentType?: String;
  size?: Int;
  fileName?: String;
}

export interface FileUpdateManyMutationInput {
  contentType?: String;
  size?: Int;
  fileName?: String;
}

export interface MessageCreateInput {
  id?: ID_Input;
  deletedAt: DateTimeInput;
  chat: ChatCreateOneWithoutMessagesInput;
  author: UserCreateOneInput;
  type: MessageType;
  text?: String;
  attachment?: FileCreateOneInput;
}

export interface ChatCreateOneWithoutMessagesInput {
  create?: ChatCreateWithoutMessagesInput;
  connect?: ChatWhereUniqueInput;
}

export interface ChatCreateWithoutMessagesInput {
  id?: ID_Input;
  members?: ChatMembershipCreateManyWithoutChatInput;
}

export interface MessageUpdateInput {
  deletedAt?: DateTimeInput;
  chat?: ChatUpdateOneRequiredWithoutMessagesInput;
  author?: UserUpdateOneRequiredInput;
  type?: MessageType;
  text?: String;
  attachment?: FileUpdateOneInput;
}

export interface ChatUpdateOneRequiredWithoutMessagesInput {
  create?: ChatCreateWithoutMessagesInput;
  update?: ChatUpdateWithoutMessagesDataInput;
  upsert?: ChatUpsertWithoutMessagesInput;
  connect?: ChatWhereUniqueInput;
}

export interface ChatUpdateWithoutMessagesDataInput {
  members?: ChatMembershipUpdateManyWithoutChatInput;
}

export interface ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput;
  create: ChatCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  deletedAt?: DateTimeInput;
  type?: MessageType;
  text?: String;
}

export interface UserUpdateInput {
  email?: String;
  passwordDigest?: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileUpdateOneInput;
  statusMessage?: String;
  memberships?: ChatMembershipUpdateManyWithoutUserInput;
  relationships?: UserRelationshipUpdateManyWithoutFromUserInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  passwordDigest?: String;
  passwordResetToken?: String;
  fullName?: String;
  statusMessage?: String;
}

export interface UserRelationshipCreateInput {
  id?: ID_Input;
  type: UserRelationType;
  fromUser: UserCreateOneWithoutRelationshipsInput;
  toUser: UserCreateOneInput;
}

export interface UserCreateOneWithoutRelationshipsInput {
  create?: UserCreateWithoutRelationshipsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutRelationshipsInput {
  id?: ID_Input;
  email: String;
  passwordDigest: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileCreateOneInput;
  statusMessage?: String;
  memberships?: ChatMembershipCreateManyWithoutUserInput;
}

export interface UserRelationshipUpdateInput {
  type?: UserRelationType;
  fromUser?: UserUpdateOneRequiredWithoutRelationshipsInput;
  toUser?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredWithoutRelationshipsInput {
  create?: UserCreateWithoutRelationshipsInput;
  update?: UserUpdateWithoutRelationshipsDataInput;
  upsert?: UserUpsertWithoutRelationshipsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutRelationshipsDataInput {
  email?: String;
  passwordDigest?: String;
  passwordResetToken?: String;
  fullName?: String;
  photo?: FileUpdateOneInput;
  statusMessage?: String;
  memberships?: ChatMembershipUpdateManyWithoutUserInput;
}

export interface UserUpsertWithoutRelationshipsInput {
  update: UserUpdateWithoutRelationshipsDataInput;
  create: UserCreateWithoutRelationshipsInput;
}

export interface UserRelationshipUpdateManyMutationInput {
  type?: UserRelationType;
}

export interface ChatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChatWhereInput;
  AND?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
  OR?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
  NOT?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
}

export interface ChatMembershipSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChatMembershipWhereInput;
  AND?:
    | ChatMembershipSubscriptionWhereInput[]
    | ChatMembershipSubscriptionWhereInput;
  OR?:
    | ChatMembershipSubscriptionWhereInput[]
    | ChatMembershipSubscriptionWhereInput;
  NOT?:
    | ChatMembershipSubscriptionWhereInput[]
    | ChatMembershipSubscriptionWhereInput;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FileWhereInput;
  AND?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  OR?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  NOT?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserRelationshipSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRelationshipWhereInput;
  AND?:
    | UserRelationshipSubscriptionWhereInput[]
    | UserRelationshipSubscriptionWhereInput;
  OR?:
    | UserRelationshipSubscriptionWhereInput[]
    | UserRelationshipSubscriptionWhereInput;
  NOT?:
    | UserRelationshipSubscriptionWhereInput[]
    | UserRelationshipSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Chat {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatPromise extends Promise<Chat>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  members: <T = FragmentableArray<ChatMembership>>(
    args?: {
      where?: ChatMembershipWhereInput;
      orderBy?: ChatMembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChatSubscription
  extends Promise<AsyncIterator<Chat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  members: <T = Promise<AsyncIterator<ChatMembershipSubscription>>>(
    args?: {
      where?: ChatMembershipWhereInput;
      orderBy?: ChatMembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChatMembership {
  id: ID_Output;
  isMuted: Boolean;
}

export interface ChatMembershipPromise
  extends Promise<ChatMembership>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chat: <T = ChatPromise>() => T;
  user: <T = UserPromise>() => T;
  isMuted: () => Promise<Boolean>;
}

export interface ChatMembershipSubscription
  extends Promise<AsyncIterator<ChatMembership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chat: <T = ChatSubscription>() => T;
  user: <T = UserSubscription>() => T;
  isMuted: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  passwordDigest: String;
  passwordResetToken?: String;
  fullName?: String;
  statusMessage?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  passwordDigest: () => Promise<String>;
  passwordResetToken: () => Promise<String>;
  fullName: () => Promise<String>;
  photo: <T = FilePromise>() => T;
  statusMessage: () => Promise<String>;
  memberships: <T = FragmentableArray<ChatMembership>>(
    args?: {
      where?: ChatMembershipWhereInput;
      orderBy?: ChatMembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  relationships: <T = FragmentableArray<UserRelationship>>(
    args?: {
      where?: UserRelationshipWhereInput;
      orderBy?: UserRelationshipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  passwordDigest: () => Promise<AsyncIterator<String>>;
  passwordResetToken: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  photo: <T = FileSubscription>() => T;
  statusMessage: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<ChatMembershipSubscription>>>(
    args?: {
      where?: ChatMembershipWhereInput;
      orderBy?: ChatMembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  relationships: <T = Promise<AsyncIterator<UserRelationshipSubscription>>>(
    args?: {
      where?: UserRelationshipWhereInput;
      orderBy?: UserRelationshipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface File {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  contentType: String;
  size: Int;
  fileName: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  contentType: () => Promise<String>;
  size: () => Promise<Int>;
  fileName: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  contentType: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  fileName: () => Promise<AsyncIterator<String>>;
}

export interface UserRelationship {
  id: ID_Output;
  type: UserRelationType;
}

export interface UserRelationshipPromise
  extends Promise<UserRelationship>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<UserRelationType>;
  fromUser: <T = UserPromise>() => T;
  toUser: <T = UserPromise>() => T;
}

export interface UserRelationshipSubscription
  extends Promise<AsyncIterator<UserRelationship>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<UserRelationType>>;
  fromUser: <T = UserSubscription>() => T;
  toUser: <T = UserSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt: DateTimeOutput;
  type: MessageType;
  text?: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  chat: <T = ChatPromise>() => T;
  author: <T = UserPromise>() => T;
  type: () => Promise<MessageType>;
  text: () => Promise<String>;
  attachment: <T = FilePromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  chat: <T = ChatSubscription>() => T;
  author: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<MessageType>>;
  text: () => Promise<AsyncIterator<String>>;
  attachment: <T = FileSubscription>() => T;
}

export interface ChatConnection {
  pageInfo: PageInfo;
  edges: ChatEdge[];
}

export interface ChatConnectionPromise
  extends Promise<ChatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatEdge>>() => T;
  aggregate: <T = AggregateChatPromise>() => T;
}

export interface ChatConnectionSubscription
  extends Promise<AsyncIterator<ChatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatEdge {
  node: Chat;
  cursor: String;
}

export interface ChatEdgePromise extends Promise<ChatEdge>, Fragmentable {
  node: <T = ChatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatEdgeSubscription
  extends Promise<AsyncIterator<ChatEdge>>,
    Fragmentable {
  node: <T = ChatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChat {
  count: Int;
}

export interface AggregateChatPromise
  extends Promise<AggregateChat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatSubscription
  extends Promise<AsyncIterator<AggregateChat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChatMembershipConnection {
  pageInfo: PageInfo;
  edges: ChatMembershipEdge[];
}

export interface ChatMembershipConnectionPromise
  extends Promise<ChatMembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatMembershipEdge>>() => T;
  aggregate: <T = AggregateChatMembershipPromise>() => T;
}

export interface ChatMembershipConnectionSubscription
  extends Promise<AsyncIterator<ChatMembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatMembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatMembershipSubscription>() => T;
}

export interface ChatMembershipEdge {
  node: ChatMembership;
  cursor: String;
}

export interface ChatMembershipEdgePromise
  extends Promise<ChatMembershipEdge>,
    Fragmentable {
  node: <T = ChatMembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatMembershipEdgeSubscription
  extends Promise<AsyncIterator<ChatMembershipEdge>>,
    Fragmentable {
  node: <T = ChatMembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChatMembership {
  count: Int;
}

export interface AggregateChatMembershipPromise
  extends Promise<AggregateChatMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatMembershipSubscription
  extends Promise<AsyncIterator<AggregateChatMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserRelationshipConnection {
  pageInfo: PageInfo;
  edges: UserRelationshipEdge[];
}

export interface UserRelationshipConnectionPromise
  extends Promise<UserRelationshipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRelationshipEdge>>() => T;
  aggregate: <T = AggregateUserRelationshipPromise>() => T;
}

export interface UserRelationshipConnectionSubscription
  extends Promise<AsyncIterator<UserRelationshipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserRelationshipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserRelationshipSubscription>() => T;
}

export interface UserRelationshipEdge {
  node: UserRelationship;
  cursor: String;
}

export interface UserRelationshipEdgePromise
  extends Promise<UserRelationshipEdge>,
    Fragmentable {
  node: <T = UserRelationshipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRelationshipEdgeSubscription
  extends Promise<AsyncIterator<UserRelationshipEdge>>,
    Fragmentable {
  node: <T = UserRelationshipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserRelationship {
  count: Int;
}

export interface AggregateUserRelationshipPromise
  extends Promise<AggregateUserRelationship>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRelationshipSubscription
  extends Promise<AsyncIterator<AggregateUserRelationship>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChatSubscriptionPayload {
  mutation: MutationType;
  node: Chat;
  updatedFields: String[];
  previousValues: ChatPreviousValues;
}

export interface ChatSubscriptionPayloadPromise
  extends Promise<ChatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatPreviousValuesPromise>() => T;
}

export interface ChatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatPreviousValuesSubscription>() => T;
}

export interface ChatPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatPreviousValuesPromise
  extends Promise<ChatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatMembershipSubscriptionPayload {
  mutation: MutationType;
  node: ChatMembership;
  updatedFields: String[];
  previousValues: ChatMembershipPreviousValues;
}

export interface ChatMembershipSubscriptionPayloadPromise
  extends Promise<ChatMembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatMembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatMembershipPreviousValuesPromise>() => T;
}

export interface ChatMembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatMembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatMembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatMembershipPreviousValuesSubscription>() => T;
}

export interface ChatMembershipPreviousValues {
  id: ID_Output;
  isMuted: Boolean;
}

export interface ChatMembershipPreviousValuesPromise
  extends Promise<ChatMembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isMuted: () => Promise<Boolean>;
}

export interface ChatMembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatMembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isMuted: () => Promise<AsyncIterator<Boolean>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  contentType: String;
  size: Int;
  fileName: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  contentType: () => Promise<String>;
  size: () => Promise<Int>;
  fileName: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  contentType: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  fileName: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt: DateTimeOutput;
  type: MessageType;
  text?: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<MessageType>;
  text: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<MessageType>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  passwordDigest: String;
  passwordResetToken?: String;
  fullName?: String;
  statusMessage?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  passwordDigest: () => Promise<String>;
  passwordResetToken: () => Promise<String>;
  fullName: () => Promise<String>;
  statusMessage: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  passwordDigest: () => Promise<AsyncIterator<String>>;
  passwordResetToken: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  statusMessage: () => Promise<AsyncIterator<String>>;
}

export interface UserRelationshipSubscriptionPayload {
  mutation: MutationType;
  node: UserRelationship;
  updatedFields: String[];
  previousValues: UserRelationshipPreviousValues;
}

export interface UserRelationshipSubscriptionPayloadPromise
  extends Promise<UserRelationshipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRelationshipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRelationshipPreviousValuesPromise>() => T;
}

export interface UserRelationshipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRelationshipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRelationshipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRelationshipPreviousValuesSubscription>() => T;
}

export interface UserRelationshipPreviousValues {
  id: ID_Output;
  type: UserRelationType;
}

export interface UserRelationshipPreviousValuesPromise
  extends Promise<UserRelationshipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<UserRelationType>;
}

export interface UserRelationshipPreviousValuesSubscription
  extends Promise<AsyncIterator<UserRelationshipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<UserRelationType>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserRelationship",
    embedded: false
  },
  {
    name: "UserRelationType",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "MessageType",
    embedded: false
  },
  {
    name: "Chat",
    embedded: false
  },
  {
    name: "ChatMembership",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
