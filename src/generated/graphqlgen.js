/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from "graphql";
import type { User, Chat, Message, File } from "./prisma-client";
import type { Context } from "../types";

export type MessageType = "SYSTEM" | "TEXT" | "FILE";

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_User {
  userId?: string | null;
  userEmail?: string | null;
}

export interface Query_Args_Chat {
  chatId: string;
}

export type Query_Me_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Query_User_Resolver = (
  parent: {},
  args: Query_Args_User,
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Query_Chat_Resolver = (
  parent: {},
  args: Query_Args_Chat,
  ctx: Context,
  info: GraphQLResolveInfo
) => Chat | Promise<Chat>;

export interface Query_Resolvers {
  me: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  user: (
    parent: {},
    args: Query_Args_User,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  chat: (
    parent: {},
    args: Query_Args_Chat,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chat | Promise<Chat>;
}

// Types for User
export const User_defaultResolvers = {
  id: (parent: User) => parent.id,
  createdAt: (parent: User) => parent.createdAt,
  updatedAt: (parent: User) => parent.updatedAt
};

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_CreatedAt_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_UpdatedAt_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Friends_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User[] | Promise<User[]>;

export type User_Blocks_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => User[] | Promise<User[]>;

export type User_JoinedChats_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Chat[] | Promise<Chat[]>;

export type User_Photo_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => File | null | Promise<File | null>;

export interface User_Resolvers {
  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  updatedAt: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  friends: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  blocks: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  joinedChats: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chat[] | Promise<Chat[]>;

  photo: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => File | null | Promise<File | null>;
}

// Types for Chat
export const Chat_defaultResolvers = {
  id: (parent: Chat) => parent.id,
  createdAt: (parent: Chat) => parent.createdAt
};

export type Chat_Id_Resolver = (
  parent: Chat,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Chat_CreatedAt_Resolver = (
  parent: Chat,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Chat_LastActiveAt_Resolver = (
  parent: Chat,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Chat_UnreadCount_Resolver = (
  parent: Chat,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export type Chat_Messages_Resolver = (
  parent: Chat,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Message[] | Promise<Message[]>;

export interface Chat_Resolvers {
  id: (
    parent: Chat,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: Chat,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  lastActiveAt: (
    parent: Chat,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  unreadCount: (
    parent: Chat,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  messages: (
    parent: Chat,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message[] | Promise<Message[]>;
}

// Types for Message
export const Message_defaultResolvers = {
  id: (parent: Message) => parent.id,
  createdAt: (parent: Message) => parent.createdAt,
  updatedAt: (parent: Message) => parent.updatedAt,
  type: (parent: Message) => parent.type,
  text: (parent: Message) => (parent.text === undefined ? null : parent.text)
};

export type Message_Id_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Message_CreatedAt_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Message_UpdatedAt_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Message_Type_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => MessageType | Promise<MessageType>;

export type Message_Text_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Message_File_Resolver = (
  parent: Message,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => File | null | Promise<File | null>;

export interface Message_Resolvers {
  id: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  updatedAt: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  type: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MessageType | Promise<MessageType>;

  text: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  file: (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => File | null | Promise<File | null>;
}

// Types for File
export const File_defaultResolvers = {
  id: (parent: File) => parent.id,
  createdAt: (parent: File) => parent.createdAt,
  updatedAt: (parent: File) => parent.updatedAt,
  contentType: (parent: File) => parent.contentType,
  size: (parent: File) => parent.size,
  fileName: (parent: File) => parent.fileName
};

export type File_Id_Resolver = (
  parent: File,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type File_CreatedAt_Resolver = (
  parent: File,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type File_UpdatedAt_Resolver = (
  parent: File,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type File_FileName_Resolver = (
  parent: File,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type File_ContentType_Resolver = (
  parent: File,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type File_Size_Resolver = (
  parent: File,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface File_Resolvers {
  id: (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  createdAt: (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  updatedAt: (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  fileName: (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  contentType: (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  size: (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Mutation
export const Mutation_defaultResolvers = {};

export interface Mutation_Args_Signup {
  email: string;
  password: string;
  name: string;
}

export interface Mutation_Args_AddFriend {
  userEmail: string;
}

export interface Mutation_Args_RemoveFriend {
  userId: string;
}

export interface Mutation_Args_BlockUser {
  userId: string;
}

export interface Mutation_Args_UploadProfilePhoto {
  file: string;
}

export interface Mutation_Args_CreateChat {
  otherUsers: string[];
}

export interface Mutation_Args_LeaveChat {
  chatId: string;
}

export interface Mutation_Args_MuteChat {
  chatId: string;
}

export interface Mutation_Args_InviteUserToChat {
  chatId: string;
  userId: string;
}

export interface Mutation_Args_PostFileMessage {
  chatId: string;
  file: string;
}

export interface Mutation_Args_PostTextMessage {
  chatID: string;
  text: string;
}

export interface Mutation_Args_RemoveMessage {
  messageId: string;
}

export type Mutation_Signup_Resolver = (
  parent: {},
  args: Mutation_Args_Signup,
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Mutation_Logout_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Mutation_AddFriend_Resolver = (
  parent: {},
  args: Mutation_Args_AddFriend,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Mutation_RemoveFriend_Resolver = (
  parent: {},
  args: Mutation_Args_RemoveFriend,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Mutation_BlockUser_Resolver = (
  parent: {},
  args: Mutation_Args_BlockUser,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Mutation_UploadProfilePhoto_Resolver = (
  parent: {},
  args: Mutation_Args_UploadProfilePhoto,
  ctx: Context,
  info: GraphQLResolveInfo
) => File | Promise<File>;

export type Mutation_CreateChat_Resolver = (
  parent: {},
  args: Mutation_Args_CreateChat,
  ctx: Context,
  info: GraphQLResolveInfo
) => Chat | Promise<Chat>;

export type Mutation_LeaveChat_Resolver = (
  parent: {},
  args: Mutation_Args_LeaveChat,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Mutation_MuteChat_Resolver = (
  parent: {},
  args: Mutation_Args_MuteChat,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Mutation_InviteUserToChat_Resolver = (
  parent: {},
  args: Mutation_Args_InviteUserToChat,
  ctx: Context,
  info: GraphQLResolveInfo
) => User | Promise<User>;

export type Mutation_PostFileMessage_Resolver = (
  parent: {},
  args: Mutation_Args_PostFileMessage,
  ctx: Context,
  info: GraphQLResolveInfo
) => Message | Promise<Message>;

export type Mutation_PostTextMessage_Resolver = (
  parent: {},
  args: Mutation_Args_PostTextMessage,
  ctx: Context,
  info: GraphQLResolveInfo
) => Message | Promise<Message>;

export type Mutation_RemoveMessage_Resolver = (
  parent: {},
  args: Mutation_Args_RemoveMessage,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface Mutation_Resolvers {
  signup: (
    parent: {},
    args: Mutation_Args_Signup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  logout: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  addFriend: (
    parent: {},
    args: Mutation_Args_AddFriend,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  removeFriend: (
    parent: {},
    args: Mutation_Args_RemoveFriend,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  blockUser: (
    parent: {},
    args: Mutation_Args_BlockUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  uploadProfilePhoto: (
    parent: {},
    args: Mutation_Args_UploadProfilePhoto,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => File | Promise<File>;

  createChat: (
    parent: {},
    args: Mutation_Args_CreateChat,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chat | Promise<Chat>;

  leaveChat: (
    parent: {},
    args: Mutation_Args_LeaveChat,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  muteChat: (
    parent: {},
    args: Mutation_Args_MuteChat,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  inviteUserToChat: (
    parent: {},
    args: Mutation_Args_InviteUserToChat,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  postFileMessage: (
    parent: {},
    args: Mutation_Args_PostFileMessage,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message | Promise<Message>;

  postTextMessage: (
    parent: {},
    args: Mutation_Args_PostTextMessage,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message | Promise<Message>;

  removeMessage: (
    parent: {},
    args: Mutation_Args_RemoveMessage,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  User: User_Resolvers;
  Chat: Chat_Resolvers;
  Message: Message_Resolvers;
  File: File_Resolvers;
  Mutation: Mutation_Resolvers;
}
