// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, Chat, Message, File } from "./prisma-client";
import { ServerContext } from "../types";

export type MessageType = "SYSTEM" | "TEXT" | "FILE";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    userId?: string | null;
    userEmail?: string | null;
  }

  export interface ArgsChat {
    chatId: string;
  }

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type ChatResolver =
    | ((
        parent: undefined,
        args: ArgsChat,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => Chat | Promise<Chat>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Chat | Promise<Chat>;
      };

  export interface Type {
    me:
      | ((
          parent: undefined,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    chat:
      | ((
          parent: undefined,
          args: ArgsChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Chat | Promise<Chat>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsChat,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => Chat | Promise<Chat>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type FriendsResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>;
      };

  export type BlocksResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>;
      };

  export type JoinedChatsResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => Chat[] | Promise<Chat[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Chat[] | Promise<Chat[]>;
      };

  export type PhotoResolver =
    | ((
        parent: User,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => File | null | Promise<File | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => File | null | Promise<File | null>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    friends:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>;
        };

    blocks:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>;
        };

    joinedChats:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Chat[] | Promise<Chat[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => Chat[] | Promise<Chat[]>;
        };

    photo:
      | ((
          parent: User,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => File | null | Promise<File | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => File | null | Promise<File | null>;
        };
  }
}

export namespace ChatResolvers {
  export const defaultResolvers = {
    id: (parent: Chat) => parent.id,
    createdAt: (parent: Chat) => parent.createdAt
  };

  export type IdResolver =
    | ((
        parent: Chat,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Chat,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type LastActiveAtResolver =
    | ((
        parent: Chat,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UnreadCountResolver =
    | ((
        parent: Chat,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type MessagesResolver =
    | ((
        parent: Chat,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => Message[] | Promise<Message[]>)
    | {
        fragment: string;
        resolve: (
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Message[] | Promise<Message[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Chat,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Chat,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    lastActiveAt:
      | ((
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Chat,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    unreadCount:
      | ((
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Chat,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    messages:
      | ((
          parent: Chat,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Message[] | Promise<Message[]>)
      | {
          fragment: string;
          resolve: (
            parent: Chat,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => Message[] | Promise<Message[]>;
        };
  }
}

export namespace MessageResolvers {
  export const defaultResolvers = {
    id: (parent: Message) => parent.id,
    createdAt: (parent: Message) => parent.createdAt,
    updatedAt: (parent: Message) => parent.updatedAt,
    type: (parent: Message) => parent.type,
    text: (parent: Message) => (parent.text === undefined ? null : parent.text)
  };

  export type IdResolver =
    | ((
        parent: Message,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Message,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Message,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TypeResolver =
    | ((
        parent: Message,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => MessageType | Promise<MessageType>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => MessageType | Promise<MessageType>;
      };

  export type TextResolver =
    | ((
        parent: Message,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type FileResolver =
    | ((
        parent: Message,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => File | null | Promise<File | null>)
    | {
        fragment: string;
        resolve: (
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => File | null | Promise<File | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    type:
      | ((
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => MessageType | Promise<MessageType>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => MessageType | Promise<MessageType>;
        };

    text:
      | ((
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    file:
      | ((
          parent: Message,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => File | null | Promise<File | null>)
      | {
          fragment: string;
          resolve: (
            parent: Message,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => File | null | Promise<File | null>;
        };
  }
}

export namespace FileResolvers {
  export const defaultResolvers = {
    id: (parent: File) => parent.id,
    createdAt: (parent: File) => parent.createdAt,
    updatedAt: (parent: File) => parent.updatedAt,
    contentType: (parent: File) => parent.contentType,
    size: (parent: File) => parent.size,
    fileName: (parent: File) => parent.fileName
  };

  export type IdResolver =
    | ((
        parent: File,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: File,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: File,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type FileNameResolver =
    | ((
        parent: File,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ContentTypeResolver =
    | ((
        parent: File,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type SizeResolver =
    | ((
        parent: File,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    id:
      | ((
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    fileName:
      | ((
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    contentType:
      | ((
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    size:
      | ((
          parent: File,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
    name: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsResetPassword {
    email: string;
  }

  export interface ArgsAddFriend {
    userEmail: string;
  }

  export interface ArgsRemoveFriend {
    userId: string;
  }

  export interface ArgsBlockUser {
    userId: string;
  }

  export interface ArgsUploadProfilePhoto {
    file: string;
  }

  export interface ArgsCreateChat {
    otherUsers: string[];
  }

  export interface ArgsLeaveChat {
    chatId: string;
  }

  export interface ArgsMuteChat {
    chatId: string;
  }

  export interface ArgsInviteUserToChat {
    chatId: string;
    userId: string;
  }

  export interface ArgsPostFileMessage {
    chatId: string;
    file: string;
  }

  export interface ArgsPostTextMessage {
    chatID: string;
    text: string;
  }

  export interface ArgsRemoveMessage {
    messageId: string;
  }

  export type SignupResolver =
    | ((
        parent: undefined,
        args: ArgsSignup,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSignup,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type LogoutResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ResetPasswordResolver =
    | ((
        parent: undefined,
        args: ArgsResetPassword,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsResetPassword,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type AddFriendResolver =
    | ((
        parent: undefined,
        args: ArgsAddFriend,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAddFriend,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type RemoveFriendResolver =
    | ((
        parent: undefined,
        args: ArgsRemoveFriend,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRemoveFriend,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BlockUserResolver =
    | ((
        parent: undefined,
        args: ArgsBlockUser,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsBlockUser,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type UploadProfilePhotoResolver =
    | ((
        parent: undefined,
        args: ArgsUploadProfilePhoto,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => File | Promise<File>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUploadProfilePhoto,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => File | Promise<File>;
      };

  export type CreateChatResolver =
    | ((
        parent: undefined,
        args: ArgsCreateChat,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => Chat | Promise<Chat>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Chat | Promise<Chat>;
      };

  export type LeaveChatResolver =
    | ((
        parent: undefined,
        args: ArgsLeaveChat,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLeaveChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type MuteChatResolver =
    | ((
        parent: undefined,
        args: ArgsMuteChat,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsMuteChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type InviteUserToChatResolver =
    | ((
        parent: undefined,
        args: ArgsInviteUserToChat,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsInviteUserToChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type PostFileMessageResolver =
    | ((
        parent: undefined,
        args: ArgsPostFileMessage,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => Message | Promise<Message>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPostFileMessage,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Message | Promise<Message>;
      };

  export type PostTextMessageResolver =
    | ((
        parent: undefined,
        args: ArgsPostTextMessage,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => Message | Promise<Message>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPostTextMessage,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Message | Promise<Message>;
      };

  export type RemoveMessageResolver =
    | ((
        parent: undefined,
        args: ArgsRemoveMessage,
        ctx: ServerContext,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRemoveMessage,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    signup:
      | ((
          parent: undefined,
          args: ArgsSignup,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSignup,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    logout:
      | ((
          parent: undefined,
          args: {},
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    resetPassword:
      | ((
          parent: undefined,
          args: ArgsResetPassword,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsResetPassword,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    addFriend:
      | ((
          parent: undefined,
          args: ArgsAddFriend,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAddFriend,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    removeFriend:
      | ((
          parent: undefined,
          args: ArgsRemoveFriend,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRemoveFriend,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    blockUser:
      | ((
          parent: undefined,
          args: ArgsBlockUser,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsBlockUser,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    uploadProfilePhoto:
      | ((
          parent: undefined,
          args: ArgsUploadProfilePhoto,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => File | Promise<File>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUploadProfilePhoto,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => File | Promise<File>;
        };

    createChat:
      | ((
          parent: undefined,
          args: ArgsCreateChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Chat | Promise<Chat>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateChat,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => Chat | Promise<Chat>;
        };

    leaveChat:
      | ((
          parent: undefined,
          args: ArgsLeaveChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLeaveChat,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    muteChat:
      | ((
          parent: undefined,
          args: ArgsMuteChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsMuteChat,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    inviteUserToChat:
      | ((
          parent: undefined,
          args: ArgsInviteUserToChat,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsInviteUserToChat,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    postFileMessage:
      | ((
          parent: undefined,
          args: ArgsPostFileMessage,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Message | Promise<Message>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPostFileMessage,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => Message | Promise<Message>;
        };

    postTextMessage:
      | ((
          parent: undefined,
          args: ArgsPostTextMessage,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => Message | Promise<Message>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPostTextMessage,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => Message | Promise<Message>;
        };

    removeMessage:
      | ((
          parent: undefined,
          args: ArgsRemoveMessage,
          ctx: ServerContext,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRemoveMessage,
            ctx: ServerContext,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Chat: ChatResolvers.Type;
  Message: MessageResolvers.Type;
  File: FileResolvers.Type;
  Mutation: MutationResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
